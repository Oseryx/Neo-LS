{
    "name": "Neo",
    "patterns": [{
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#chars"
        },
        {
            "include": "#digits"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#multiline-comments"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#class"
        },
        {
            "include": "#inheritance"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#functionVars"
        },
        {
            "include": "#varsAndProps"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [{
                "name": "keyword.control.neo",
                "match": "\\b(if|while|for|return)\\b"
            }]
        },
        "strings": {
            "name": "string.quoted.double.neo",
            "begin": "\"",
            "end": "\"",
            "patterns": [{
                "name": "constant.character.escape.neo",
                "match": "\\\\."
            }]
        },
        "chars": {
            "name": "string.quoted.single.neo",
            "begin": "'",
            "end": "'",
            "patterns": [{
                "match": "."
            }]
        },
        "digits": {
            "name": "constant.numeric.decimal.neo",
            "match": "(\\b[0-9][0-9_]*(n)?\\b(?!\\.))|(\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|(\\b[0-9][0-9_]*(\\.)(n)?\\B)|(\\B(\\.)[0-9][0-9_]*(n)?\\b)"
        },
        "operators": {
            "patterns": [{
                    "name": "keyword.operator.assignment.neo",
                    "match": "(\\s*(<|\\+|\\-|\\||\\*|\\%|\\&|!|=|>)\\s*)"
                },
                {
                    "name": "keyword.operator.assignment.neo",
                    "match": "([^/*]|^|\\s+)?(\\/)(\\s+|[^*/]|$)"
                }
            ]
        },
        "variables": {
            "begin": "\\b(var)\\s*\\b",
            "end": "\\b(\\w*)\\b",
            "beginCaptures": {
                "0": {
                    "patterns": [{
                        "name": "keyword.control.neo",
                        "match": "var"
                    }]
                }
            },
            "endCaptures": {
                "0": {
                    "patterns": [{
                        "name": "variable.other.readwrite.neo",
                        "match": "\\w*"
                    }]
                }
            }
        },
        "varsAndProps": {
            "patterns": [{
                    "match": "(\\w)*\\(",
                    "captures": {
                        "0": {
                            "patterns": [{
                                "name": "entity.name.function.neo",
                                "match": "(\\w)*[^(]"
                            }]
                        }
                    }
                },
                {
                    "name": "variable.other.readwrite",
                    "match": "(\\w)*[^\\W]"
                }
            ]
        },
        "functions": {
            "begin": "\\b((func)\\s*)\\b",
            "end": "\\b(\\w*)\\b",
            "beginCaptures": {
                "0": {
                    "patterns": [{
                        "name": "keyword.control.neo",
                        "match": "func"
                    }]
                }
            },
            "endCaptures": {
                "0": {
                    "patterns": [{
                        "name": "entity.name.function.neo",
                        "match": "\\w*"
                    }]
                }
            }
        },
        "functionVars": {
            "begin": "(\\(|,)\\s*",
            "end": "(\\w)*",
            "endCaptures": {
                "0": {
                    "patterns": [{
                        "include": "#digits"
                    }, {
                        "include": "#variables"
                    }, {
                        "name": "variable.other.readwrite.neo",
                        "match": ".*"
                    }]
                }
            }
        },
        "class": {
            "begin": "\\b((class)\\s*)\\b",
            "end": "\\b(\\w*)\\b",
            "beginCaptures": {
                "0": {
                    "patterns": [{
                        "match": "class",
                        "name": "keyword.control.neo"
                    }]
                }
            },
            "endCaptures": {
                "0": {
                    "patterns": [{
                        "name": "entity.name.type.class.neo",
                        "match": "\\w*"
                    }]
                }
            }
        },
        "inheritance": {

            "begin": "\\b((inherits)\\s*)\\b",
            "end": "\\b(\\w*)\\b",
            "beginCaptures": {
                "0": {
                    "patterns": [{
                        "match": "inherits",
                        "name": "keyword.control.neo"
                    }]
                }
            },
            "endCaptures": {
                "0": {
                    "patterns": [{
                        "name": "entity.name.type.class.parent.neo",
                        "match": "\\w*"
                    }]
                }
            }
        },
        "comments": {
            "patterns": [{
                "match": "\\/\\/(.)*",
                "name": "comment.line.double-slash.neo"
            }]
        },
        "multiline-comments": {
            "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
            "end": "\\*/",
            "name": "comment.block"
        }
    },
    "scopeName": "source.neo"
}